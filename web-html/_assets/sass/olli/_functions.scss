/*Olli mixins'*/

/* Color Contrast
.my-element {
    background: $backgroud-color;
    color: text-contrast($backgroud-color);
  }
.my-element {
    background: $backgroud-color;
    color: text-contrast($backgroud-color, DarkSalmon);
  } */
@function luma($color){
    // Thanks voxpelli for a very concise implementation of luminance measure in sass
    // Adapted from: https://gist.github.com/voxpelli/6304812
    $rgba: red($color), green($color), blue($color);
    $rgba2: ();
    @for $i from 1 through 3 {
      $rgb: nth($rgba, $i);
      $rgb: $rgb / 255;
      $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));
      $rgba2: append($rgba2, $rgb);
    }
    @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;
  }
  @function contrast_ratio($color1, $color2) {
    $luma1: luma($color1) + 5;
    $luma2: luma($color2) + 5;
    $ratio: $luma1 / $luma2;
    @if $luma1 < $luma2 {
      $ratio: 1 / $ratio;
    }
    @return $ratio;
  }

  @function text-contrast($color, $bgcolor: $color,$threshold: 4.5) {
    //$threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA
    $list: 10 20 30 40 50 60 70 80 90 100;
    @each $percent in $list {
      $lighter: lighten($bgcolor, $percent);
      $darker: darken($bgcolor, $percent);
      $darker-ratio: contrast_ratio($color, $darker);
      $lighter-ratio: contrast_ratio($color, $lighter);
      @if($lighter-ratio > $darker-ratio){
        @if ($lighter-ratio > $threshold){
          @return $lighter;
        }
      }
      @if($darker-ratio > $lighter-ratio){
        @if ($darker-ratio > $threshold){
          @return $darker;
        }
      }
    }
    @return if(lightness($color) < 51, #FFF, #000)
  }
  @function contrast($color)
  {
    @return if(lightness($color) < 51, #FFF, #000)
  }

@function scut-strip-unit (
  $num
) {

  @return $num / ($num * 0 + 1);

}
@function scut-em (
  $pixels,
  $base: 16
) {

  // $base could be in em or px (no unit = px).
  // Adjust accordingly to create a $divisor that
  // serves as context for $pixels.
  $multiplier: if(unit($base) == em, 16, 1);
  $divisor: scut-strip-unit($base) * $multiplier;

  @return ($pixels / $divisor) * 1em;

}
@function px2em (
  $pixels,
  $base: $base-font-size
) {

  // $base could be in em or px (no unit = px).
  // Adjust accordingly to create a $divisor that
  // serves as context for $pixels.
  $multiplier: if(unit($base) == em, $base, 1);
  $divisor: scut-strip-unit($base) * $multiplier;

  @return ($pixels / $divisor) * 1em;

}
@function px2rem (
  $pixels,
  $base: 10
) {

  // $base could be in em or px (no unit = px).
  // Adjust accordingly to create a $divisor that
  // serves as context for $pixels.
  $multiplier: if(unit($base) == rem, $base, 1);
  $divisor: scut-strip-unit($base) * $multiplier;

  @return ($pixels / $divisor) * 1rem;
}
@function rem2px (
  $value,
  $base: 10
) {
  @return ($value * $base) * 1px;
}
// Scaling Varaibles
$golden: 1.618;
$minor-second: 1.067;
$major-second: 1.125;
$minor-third: 1.2;
$major-third: 1.25;
$perfect-fourth: 1.333;
$augmented-fourth: 1.414;
$perfect-fifth: 1.5;
$minor-sixth: 1.6;
$major-sixth: 1.667;
$minor-seventh: 1.778;
$major-seventh: 1.875;
$octave: 2;
$major-tenth: 2.5;
$major-eleventh: 2.667;
$major-twelfth: 3;
$double-octave: 4;

@function modular-scale($value, $increment, $ratio:$golden) {
  $v1: nth($value, 1);
  $v2: nth($value, length($value));
  $value: $v1;

  // scale $v2 to just above $v1
  @while $v2 > $v1 {
    $v2: ($v2 / $ratio); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $ratio); // will fix off-by-1
  }

  // check AFTER scaling $v2 to prevent double-counting corner-case
  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $ratio) > $v2 {
        $value: $v2;
        $v2: ($v2 * $ratio);
      } @else {
        $v1: ($v1 * $ratio);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    // adjust $v2 to just below $v1
    @if $double-stranded {
      $v2: ($v2 / $ratio);
    }

    @for $i from $increment through -1 {
      @if $double-stranded and ($v1 / $ratio) < $v2 {
        $value: $v2;
        $v2: ($v2 / $ratio);
      } @else {
        $v1: ($v1 / $ratio);
        $value: $v1;
      }
    }
  }

  @return $value;
}